generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model banner {
  id                   String    @id @db.Char(36)
  type                 String    @db.VarChar(255)
  title                String    @db.VarChar(255)
  title_en             String    @db.VarChar(255)
  short_description    String    @db.LongText
  short_description_en String    @db.LongText
  url                  String
  bg_image             String?
  bg_color             String?
  primary_image        String
  order                Int       @db.TinyInt
  is_active            Boolean
  created_at           DateTime? @db.Timestamp(0)
  updated_at           DateTime? @db.Timestamp(0)
  created_by           String?   @db.Char(36)
  updated_by           String?   @db.Char(36)
  deleted_by           String?   @db.Char(36)
  deleted_at           DateTime? @db.DateTime(0)
}

model blog {
  id              String          @id @db.Char(36)
  title           String          @db.VarChar(150)
  title_en        String?         @db.VarChar(255)
  slug            String          @db.VarChar(255)
  slug_en         String?         @db.VarChar(255)
  category_id     String          @db.Char(36)
  content         String          @db.LongText
  content_en      String?         @db.LongText
  image           String
  writer          String          @db.VarChar(80)
  is_active       Boolean
  created_by      String?         @db.Char(36)
  updated_by      String?         @db.Char(36)
  deleted_by      String?         @db.Char(36)
  deleted_at      DateTime?       @db.DateTime(0)
  created_at      DateTime?       @db.Timestamp(0)
  updated_at      DateTime?       @db.Timestamp(0)
  master_category master_category @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "blog_category_id_foreign")
  blog_tag        blog_tag[]
  comment         comment[]

  @@index([category_id], map: "blog_category_id_foreign")
}

model blog_tag {
  id         String    @id @db.Char(36)
  blog_id    String    @db.Char(36)
  tag_id     String    @db.Char(36)
  created_by String?   @db.Char(36)
  updated_by String?   @db.Char(36)
  deleted_by String?   @db.Char(36)
  deleted_at DateTime? @db.DateTime(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  blog       blog      @relation(fields: [blog_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "blog_tag_blog_id_foreign")
  tag        tag       @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "blog_tag_tag_id_foreign")

  @@index([blog_id], map: "blog_tag_blog_id_foreign")
  @@index([tag_id], map: "blog_tag_tag_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model candidate {
  id              String            @id @db.Char(36)
  name            String            @db.VarChar(255)
  experience      Int               @db.SmallInt
  career_id       String?           @db.Char(36)
  email           String
  phone_number    String
  position        String?           @db.Char(36)
  last_position   String?
  salary          String?
  origin          Int               @db.TinyInt
  status          Int               @db.TinyInt
  applied_at      DateTime?         @db.DateTime(0)
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  created_by      String?           @db.Char(36)
  updated_by      String?           @db.Char(36)
  deleted_by      String?           @db.Char(36)
  deleted_at      DateTime?         @db.DateTime(0)
  career          career?           @relation(fields: [career_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "candidate_career_id_foreign")
  master_position master_position?  @relation(fields: [position], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "candidate_position_foreign")
  candidate_files candidate_files[]

  @@index([career_id], map: "candidate_career_id_foreign")
  @@index([position], map: "candidate_position_foreign")
}

model candidate_files {
  id           String    @id @db.Char(36)
  filename     String    @db.VarChar(255)
  path         String    @db.VarChar(512)
  candidate_id String    @db.Char(36)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
  created_by   String?   @db.Char(36)
  updated_by   String?   @db.Char(36)
  deleted_by   String?   @db.Char(36)
  deleted_at   DateTime? @db.DateTime(0)
  candidate    candidate @relation(fields: [candidate_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "candidate_files_candidate_id_foreign")

  @@index([candidate_id], map: "candidate_files_candidate_id_foreign")
}

model capability {
  id                    String                  @id @db.Char(36)
  title                 String                  @db.VarChar(255)
  title_en              String                  @db.VarChar(255)
  icon                  String?                 @db.VarChar(255)
  is_active             Boolean
  type_id               String                  @db.Char(36)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  created_by            String?                 @db.Char(36)
  updated_by            String?                 @db.Char(36)
  deleted_by            String?                 @db.Char(36)
  deleted_at            DateTime?               @db.DateTime(0)
  capability_type       capability_type         @relation(fields: [type_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "capability_type_id_foreign")
  capability_portofolio capability_portofolio[]

  @@index([type_id], map: "capability_type_id_foreign")
}

model capability_portofolio {
  id            String     @id @db.Char(36)
  capability_id String     @db.Char(36)
  portofolio_id String     @db.Char(36)
  created_at    DateTime?  @db.Timestamp(0)
  updated_at    DateTime?  @db.Timestamp(0)
  created_by    String?    @db.Char(36)
  deleted_by    String?    @db.VarChar(36)
  deleted_at    DateTime?  @db.DateTime(0)
  updated_by    String?    @db.VarChar(36)
  capability    capability @relation(fields: [capability_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "capability_portofolio_capability_id_foreign")
  portofolio    portofolio @relation(fields: [portofolio_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "capability_portofolio_portofolio_id_foreign")

  @@index([capability_id], map: "capability_portofolio_capability_id_foreign")
  @@index([portofolio_id], map: "capability_portofolio_portofolio_id_foreign")
}

model capability_type {
  id             String       @id @db.Char(36)
  title          String       @db.VarChar(255)
  title_en       String       @db.VarChar(255)
  description    String       @db.VarChar(500)
  description_en String       @db.VarChar(500)
  is_active      Boolean
  created_at     DateTime?    @db.Timestamp(0)
  updated_at     DateTime?    @db.Timestamp(0)
  created_by     String?      @db.Char(36)
  updated_by     String?      @db.Char(36)
  deleted_by     String?      @db.Char(36)
  deleted_at     DateTime?    @db.DateTime(0)
  capability     capability[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model career {
  id              String          @id @db.Char(36)
  position        String          @db.Char(36)
  level           String          @db.VarChar(36)
  description     String          @db.LongText
  description_en  String          @db.LongText
  is_active       Boolean
  created_at      DateTime?       @db.Timestamp(0)
  updated_at      DateTime?       @db.Timestamp(0)
  created_by      String?         @db.Char(36)
  updated_by      String?         @db.Char(36)
  deleted_by      String?         @db.Char(36)
  deleted_at      DateTime?       @db.DateTime(0)
  candidate       candidate[]
  master_position master_position @relation(fields: [position], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "career_position_foreign")

  @@index([position], map: "career_position_foreign")
}

model comment {
  id               String    @id @db.Char(36)
  parent_id        String?   @db.Char(36)
  comment          String    @db.VarChar(255)
  writer           String
  blog_id          String    @db.Char(36)
  status           Int       @db.TinyInt
  publication_date String?   @db.Text
  created_at       DateTime? @db.Timestamp(0)
  updated_at       DateTime? @db.Timestamp(0)
  is_active        Boolean   @default(false)
  created_by       String?   @db.Char(36)
  updated_by       String?   @db.Char(36)
  deleted_by       String?   @db.Char(36)
  deleted_at       DateTime? @db.DateTime(0)
  email            String
  blog             blog      @relation(fields: [blog_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "comment_blog_id_foreign")

  @@index([blog_id], map: "comment_blog_id_foreign")
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model feature {
  id                     String     @id @db.Char(36)
  portofolio_id          String     @db.Char(36)
  feature                String     @db.VarChar(255)
  feature_en             String     @db.VarChar(255)
  description_feature    String     @db.Text
  description_feature_en String     @db.Text
  icon_feature           String     @db.VarChar(255)
  created_at             DateTime?  @db.Timestamp(0)
  updated_at             DateTime?  @db.Timestamp(0)
  created_by             String?    @db.Char(36)
  updated_by             String?    @db.Char(36)
  deleted_by             String?    @db.Char(36)
  deleted_at             DateTime?  @db.DateTime(0)
  portofolio             portofolio @relation(fields: [portofolio_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "feature_portofolio_id_foreign")

  @@index([portofolio_id], map: "feature_portofolio_id_foreign")
}

model master_category {
  id         String    @id @db.Char(36)
  category   String    @db.VarChar(255)
  created_by String?   @db.Char(36)
  deleted_by String?   @db.VarChar(36)
  deleted_at DateTime? @db.DateTime(0)
  updated_by String?   @db.VarChar(36)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  blog       blog[]
}

model master_position {
  id                  String                @id @db.Char(36)
  position            String                @db.VarChar(255)
  created_at          DateTime?             @db.Timestamp(0)
  updated_at          DateTime?             @db.Timestamp(0)
  created_by          String?               @db.Char(36)
  deleted_by          String?               @db.VarChar(36)
  deleted_at          DateTime?             @db.DateTime(0)
  updated_by          String?               @db.VarChar(36)
  candidate           candidate[]
  career              career[]
  position_portofolio position_portofolio[]
  testimonial_crew    testimonial_crew[]
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String
  batch     Int
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model password_resets {
  email      String
  token      String
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model portofolio {
  id                    String                  @id @db.Char(36)
  title                 String                  @db.VarChar(80)
  title_en              String                  @db.VarChar(80)
  slug                  String                  @db.VarChar(80)
  slug_en               String                  @db.VarChar(80)
  description           String                  @db.Text
  description_en        String                  @db.Text
  background_info       String                  @db.Text
  background_info_en    String                  @db.Text
  goal                  String                  @db.Text
  goal_en               String                  @db.Text
  solution              String                  @db.Text
  solution_en           String                  @db.Text
  background            String?                 @db.VarChar(128)
  background_color      String?                 @db.VarChar(128)
  image                 String                  @db.VarChar(128)
  icon                  String                  @db.VarChar(128)
  website               String?                 @db.VarChar(128)
  playstore             String?                 @db.VarChar(128)
  appstore              String?                 @db.VarChar(128)
  process               String?                 @db.LongText
  process_en            String?                 @db.LongText
  testimonial_id        String?                 @db.Char(36)
  is_active             Boolean
  created_by            String?                 @db.Char(36)
  deleted_by            String?                 @db.VarChar(36)
  deleted_at            DateTime?               @db.DateTime(0)
  updated_by            String?                 @db.VarChar(36)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  chatbot               String?                 @db.VarChar(128)
  capability_portofolio capability_portofolio[]
  feature               feature[]
  testimonial_client    testimonial_client?     @relation(fields: [testimonial_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "portofolio_testimonial_id_foreign")
  position_portofolio   position_portofolio[]
  screenshoot           screenshoot[]
  service_portofolio    service_portofolio[]
  tag_portofolio        tag_portofolio[]

  @@index([testimonial_id], map: "portofolio_testimonial_id_foreign")
}

model position_portofolio {
  id              String          @id @db.Char(36)
  position_id     String          @db.Char(36)
  portofolio_id   String          @db.Char(36)
  created_at      DateTime?       @db.Timestamp(0)
  updated_at      DateTime?       @db.Timestamp(0)
  created_by      String?         @db.Char(36)
  deleted_by      String?         @db.VarChar(36)
  deleted_at      DateTime?       @db.DateTime(0)
  updated_by      String?         @db.VarChar(36)
  portofolio      portofolio      @relation(fields: [portofolio_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "position_portofolio_portofolio_id_foreign")
  master_position master_position @relation(fields: [position_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "position_portofolio_position_id_foreign")

  @@index([portofolio_id], map: "position_portofolio_portofolio_id_foreign")
  @@index([position_id], map: "position_portofolio_position_id_foreign")
}

model screenshoot {
  id            String      @id @db.Char(36)
  filename      String?     @db.VarChar(255)
  path          String?     @db.VarChar(512)
  portofolio_id String?     @db.Char(36)
  created_at    DateTime?   @db.Timestamp(0)
  updated_at    DateTime?   @db.Timestamp(0)
  created_by    String?     @db.Char(36)
  updated_by    String?     @db.Char(36)
  deleted_by    String?     @db.Char(36)
  deleted_at    DateTime?   @db.DateTime(0)
  portofolio    portofolio? @relation(fields: [portofolio_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "screenshoot_portofolio_id_foreign")

  @@index([portofolio_id], map: "screenshoot_portofolio_id_foreign")
}

model service {
  id                 String               @id @db.Char(36)
  title              String               @db.VarChar(255)
  title_en           String               @db.VarChar(255)
  icon               String
  description        String               @db.LongText
  description_en     String               @db.LongText
  order              Int                  @default(0) @db.SmallInt
  is_highlighted     Boolean              @default(false)
  is_active          Boolean
  created_at         DateTime?            @db.Timestamp(0)
  created_by         String?              @db.VarChar(36)
  updated_at         DateTime?            @db.Timestamp(0)
  updated_by         String?              @db.VarChar(36)
  deleted_by         String?              @db.VarChar(36)
  deleted_at         DateTime?            @db.DateTime(0)
  service_portofolio service_portofolio[]
}

model service_portofolio {
  id            String     @id @db.Char(36)
  service_id    String     @db.Char(36)
  portofolio_id String     @db.Char(36)
  created_at    DateTime?  @db.Timestamp(0)
  updated_at    DateTime?  @db.Timestamp(0)
  created_by    String?    @db.Char(36)
  deleted_by    String?    @db.VarChar(36)
  deleted_at    DateTime?  @db.DateTime(0)
  updated_by    String?    @db.VarChar(36)
  portofolio    portofolio @relation(fields: [portofolio_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "service_portofolio_portofolio_id_foreign")
  service       service    @relation(fields: [service_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "service_portofolio_service_id_foreign")

  @@index([portofolio_id], map: "service_portofolio_portofolio_id_foreign")
  @@index([service_id], map: "service_portofolio_service_id_foreign")
}

model tag {
  id             String           @id @db.Char(36)
  title          String           @db.VarChar(255)
  created_by     String?          @db.Char(36)
  deleted_by     String?          @db.VarChar(36)
  deleted_at     DateTime?        @db.DateTime(0)
  updated_by     String?          @db.VarChar(36)
  created_at     DateTime?        @db.Timestamp(0)
  updated_at     DateTime?        @db.Timestamp(0)
  blog_tag       blog_tag[]
  tag_portofolio tag_portofolio[]
}

model tag_portofolio {
  id            String     @id @db.Char(36)
  tag_id        String     @db.Char(36)
  portofolio_id String     @db.Char(36)
  created_at    DateTime?  @db.Timestamp(0)
  updated_at    DateTime?  @db.Timestamp(0)
  created_by    String?    @db.Char(36)
  deleted_by    String?    @db.VarChar(36)
  deleted_at    DateTime?  @db.DateTime(0)
  updated_by    String?    @db.VarChar(36)
  portofolio    portofolio @relation(fields: [portofolio_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "tag_portofolio_portofolio_id_foreign")
  tag           tag        @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "tag_portofolio_tag_id_foreign")

  @@index([portofolio_id], map: "tag_portofolio_portofolio_id_foreign")
  @@index([tag_id], map: "tag_portofolio_tag_id_foreign")
}

model technology {
  id         String    @id @db.Char(36)
  title      String    @db.VarChar(255)
  title_en   String    @db.VarChar(255)
  logo       String
  url        String
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  is_active  Boolean
  is_delete  Boolean
}

model testimonial_client {
  id          String       @id @db.Char(36)
  client      String       @db.VarChar(255)
  position    String       @db.VarChar(255)
  photo       String?
  testimonial String       @db.LongText
  is_active   Boolean
  highlighted Boolean
  created_at  DateTime?    @db.Timestamp(0)
  updated_at  DateTime?    @db.Timestamp(0)
  created_by  String?      @db.Char(36)
  updated_by  String?      @db.Char(36)
  deleted_by  String?      @db.Char(36)
  deleted_at  String?      @db.Char(36)
  portofolio  portofolio[]
}

model testimonial_crew {
  id              String          @id @db.Char(36)
  crew            String          @db.VarChar(255)
  position        String          @db.Char(36)
  photo           String
  testimonial     String          @db.LongText
  is_active       Boolean
  highlighted     Boolean
  created_at      DateTime?       @db.Timestamp(0)
  updated_at      DateTime?       @db.Timestamp(0)
  created_by      String?         @db.Char(36)
  updated_by      String?         @db.Char(36)
  deleted_by      String?         @db.Char(36)
  deleted_at      String?         @db.Char(36)
  master_position master_position @relation(fields: [position], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "testimonials_position_foreign")

  @@index([position], map: "testimonials_position_foreign")
}

model users {
  id                String    @id @db.Char(36)
  name              String
  email             String    @unique(map: "users_email_unique")
  role              String?   @db.Char(1)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
}
